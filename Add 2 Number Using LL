#include <iostream>
using namespace std;

class Node{
public:
int data;
Node*next;
  Node(int data){
    this->data=data;
    this->next=NULL;
      }
};
Node * reverse(Node * &head){
  Node *pre =NULL;
  Node *curr=head;
  Node*forward=curr->next;
  while(curr!=NULL){
    forward=curr->next;
    curr->next=pre;
    pre=curr;
    curr=forward;
  }
  return pre;
}


Node *solve(Node * &head1,Node * &head2){
  //step1: reverse both linked list
   head1=reverse(head1);
   head2=reverse(head2);

 // Step2: add both linked list
 Node * ansHead=NULL;
 Node * ansTail=NULL;
  int carry=0;
  while(head1 != NULL && head2 != NULL){
    int sum=carry+head1->data+head2->data;
    int digit=sum%10;
    int carry=sum/10;
  //create a new Node for the digit;
    Node *newNode = new Node(digit);
    //attached the new node into the answer wali linked list
    if(ansHead==NULL){
      ansHead=newNode;
      ansTail=newNode;
    }
    else{
      ansTail->next=newNode;
      ansTail =newNode;
    }
   head1=head1->next;
   head2=head2->next; 
  }
//jab head1 list ki length head2 se jyade ho
  while(head1 !=NULL){
    int sum=carry+head1->data;
    int digit=sum%10;
    int carry=sum/10;

    Node *newNode=new Node(digit);
    ansTail->next=newNode;
    ansTail=newNode;
    head1=head1->next;
  }
//jab head2 list ki length head2 list se jyada hogi
  while(head2 !=NULL){
    int sum=carry+head2->data;
    int digit=sum%10;
    int carry=sum/10;

    Node *newNode=new Node(digit);
    ansTail->next=newNode;
    ansTail=newNode;
    head2=head2->next;
  }
  while(carry !=0){
      int sum=carry;
    int digit=sum%10;
    int carry=sum/ 10;
   Node * newNode=new Node(digit);
    ansTail->next=newNode;
    ansTail=newNode;
  }
  
  //reverse the ans LL

  ansHead=reverse(ansHead);
  return ansHead;
}
void print(Node*head){
  Node*temp=head;
  while(temp!=NULL){
    cout<<temp->data<<" ";
      temp=temp->next;
  }
}
int main(){
  Node *head1=new Node(2);
  Node*second1=new Node(4);
  head1->next=second1;

  Node* head2=new Node(2);
  Node*second2=new Node(3);
  Node*third2=new Node(4);
  head2->next=second2;
  second2->next=third2;

  Node* ans= solve(head1,head2);
  print(ans);

  
  
}
